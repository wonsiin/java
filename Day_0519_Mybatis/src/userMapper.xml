<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <!--  주석모양
  		namespace : interface의 full name 을 적는다.
  		parameterType : 파라미터로 전달되는 객체의 full name을 적는다. (full name = 패키지 주소 포함)
  		insert, update, delete ==> resultType을 지정하지 않아야한다.(지정시 오류 걸림)
   -->
<mapper namespace="scit.dao.UserMapper">
		<insert id="insertUser" parameterType="scit.vo.UserVO"> <!-- 입력에 대한 결과물 insert 명 , 첨부될 타입      #{} 백터를 호출한다. -->
		INSERT INTO USR
			(usrid, usrname)
		VALUES
			(#{usrid}, #{usrname})  <!--   #{usrid} ==> getUsrid()    이렇게 바뀐다.     --> 
		</insert>
		<!-- 리턴타입이 있으면 resultType에 list의 속성값을 적어줘야한다  -->
		<!--  3개의 정보를 저장 -->
		<insert id="insert"  parameterType="scit.vo.User">
			INSERT INTO USRADDR
			(usrid, phone, address)
		VALUES
			(#{usrid}, #{phone},#{address})
		</insert>
		<select id="selectUser" resultType="scit.vo.UserVO"> <!-- 출력에 대한 결과물산출 -->
		SELECT
			usrid , usrname 										<!--   #{usrid} ==> setUsrid(usrid)    이렇게 바뀐다.   세미클론을 찍어선 안된다.  --> 
		FROM
				USR
		</select>
		<!--  메소드명 , 타입 , result값(리턴값) -->
		<select id="findById" parameterType="string"  resultType="scit.vo.UserVO">
			SELECT * FROM usr WHERE usrid = #{usrid}
		</select>
			<select id="selectAll"  resultType="scit.vo.User">
			SELECT 
			u1.usrid, u1.usrname, u2.phone, u2.address 
			FROM 
			usr u1,USRADDR u2 
			WHERE 
			u1.usrid = u2.usrid (+)
		</select>
		<update id="updateUser"  parameterType="scit.vo.User">
			UPDATE 
			USR
			SET
			usrname = #{usrname}
			WHERE 
			usrid = #{usrid}
		</update>
		<update id="updateAddress"  parameterType="scit.vo.User">
			UPDATE 
			USRaddr
			SET
			phone = #{phone},
			address = #{address}
			WHERE 
			usrid = #{usrid}
		</update>
		<delete id="delete"  parameterType="string">
			delete 
			USR
			where
			usrid = #{usrid}
		</delete>
		
		
		
		
</mapper>